class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
         // solve without reversing the list
        // using stack
        Stack<Integer> s1 = new Stack<>();
        Stack<Integer> s2 = new Stack<>();
        
        while(l1 != null){
            s1.add(l1.val);
            l1=l1.next;
        }
        while(l2!=null){
            s2.add(l2.val);
            l2 = l2.next;
                  }
      int carry = 0;
        ListNode result = null;
        
        while(!s1.isEmpty() || !s2.isEmpty() ){
            int a = 0,b=0;
            if(!s1.isEmpty() ){
                a = s1.pop();
            }
              if(!s2.isEmpty()){
                   b = s2.pop();
              }
            
            int sum = a+b+ carry;
           
            ListNode temp = new ListNode(sum%10);
            carry = sum/10;
            
            if(result == null){
                result = temp;
                
            }else{
                temp.next = result;
                result = temp;
            }
            
        }
          if(carry != 0){
              ListNode temp = new ListNode(carry);
              temp.next = result;
              result = temp;
          }
         return result;
        
    }
}
